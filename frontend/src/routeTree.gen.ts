/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WorkspacesImport } from './routes/workspaces'
import { Route as MeImport } from './routes/me'
import { Route as LoginImport } from './routes/login'
import { Route as CanvasImport } from './routes/canvas'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as WorkspacesIndexImport } from './routes/workspaces/index'
import { Route as MeIndexImport } from './routes/me/index'
import { Route as AdminIndexImport } from './routes/admin/index'

// Create/Update Routes

const WorkspacesRoute = WorkspacesImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => rootRoute,
} as any)

const MeRoute = MeImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CanvasRoute = CanvasImport.update({
  id: '/canvas',
  path: '/canvas',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkspacesIndexRoute = WorkspacesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkspacesRoute,
} as any)

const MeIndexRoute = MeIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MeRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/canvas': {
      id: '/canvas'
      path: '/canvas'
      fullPath: '/canvas'
      preLoaderRoute: typeof CanvasImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/me': {
      id: '/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof MeImport
      parentRoute: typeof rootRoute
    }
    '/workspaces': {
      id: '/workspaces'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof WorkspacesImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/me/': {
      id: '/me/'
      path: '/'
      fullPath: '/me/'
      preLoaderRoute: typeof MeIndexImport
      parentRoute: typeof MeImport
    }
    '/workspaces/': {
      id: '/workspaces/'
      path: '/'
      fullPath: '/workspaces/'
      preLoaderRoute: typeof WorkspacesIndexImport
      parentRoute: typeof WorkspacesImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface MeRouteChildren {
  MeIndexRoute: typeof MeIndexRoute
}

const MeRouteChildren: MeRouteChildren = {
  MeIndexRoute: MeIndexRoute,
}

const MeRouteWithChildren = MeRoute._addFileChildren(MeRouteChildren)

interface WorkspacesRouteChildren {
  WorkspacesIndexRoute: typeof WorkspacesIndexRoute
}

const WorkspacesRouteChildren: WorkspacesRouteChildren = {
  WorkspacesIndexRoute: WorkspacesIndexRoute,
}

const WorkspacesRouteWithChildren = WorkspacesRoute._addFileChildren(
  WorkspacesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/canvas': typeof CanvasRoute
  '/login': typeof LoginRoute
  '/me': typeof MeRouteWithChildren
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/me/': typeof MeIndexRoute
  '/workspaces/': typeof WorkspacesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/canvas': typeof CanvasRoute
  '/login': typeof LoginRoute
  '/admin': typeof AdminIndexRoute
  '/me': typeof MeIndexRoute
  '/workspaces': typeof WorkspacesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/canvas': typeof CanvasRoute
  '/login': typeof LoginRoute
  '/me': typeof MeRouteWithChildren
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/me/': typeof MeIndexRoute
  '/workspaces/': typeof WorkspacesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/canvas'
    | '/login'
    | '/me'
    | '/workspaces'
    | '/admin/'
    | '/me/'
    | '/workspaces/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/canvas' | '/login' | '/admin' | '/me' | '/workspaces'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/canvas'
    | '/login'
    | '/me'
    | '/workspaces'
    | '/admin/'
    | '/me/'
    | '/workspaces/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  CanvasRoute: typeof CanvasRoute
  LoginRoute: typeof LoginRoute
  MeRoute: typeof MeRouteWithChildren
  WorkspacesRoute: typeof WorkspacesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  CanvasRoute: CanvasRoute,
  LoginRoute: LoginRoute,
  MeRoute: MeRouteWithChildren,
  WorkspacesRoute: WorkspacesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/canvas",
        "/login",
        "/me",
        "/workspaces"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/"
      ]
    },
    "/canvas": {
      "filePath": "canvas.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/me": {
      "filePath": "me.tsx",
      "children": [
        "/me/"
      ]
    },
    "/workspaces": {
      "filePath": "workspaces.tsx",
      "children": [
        "/workspaces/"
      ]
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/me/": {
      "filePath": "me/index.tsx",
      "parent": "/me"
    },
    "/workspaces/": {
      "filePath": "workspaces/index.tsx",
      "parent": "/workspaces"
    }
  }
}
ROUTE_MANIFEST_END */
