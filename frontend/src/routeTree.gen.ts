/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkspacesRouteImport } from './routes/workspaces'
import { Route as MeRouteImport } from './routes/me'
import { Route as LoginRouteImport } from './routes/login'
import { Route as CanvasRouteImport } from './routes/canvas'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkspacesIndexRouteImport } from './routes/workspaces/index'
import { Route as MeIndexRouteImport } from './routes/me/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'

const WorkspacesRoute = WorkspacesRouteImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => rootRouteImport,
} as any)
const MeRoute = MeRouteImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const CanvasRoute = CanvasRouteImport.update({
  id: '/canvas',
  path: '/canvas',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspacesIndexRoute = WorkspacesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkspacesRoute,
} as any)
const MeIndexRoute = MeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MeRoute,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LoginRoute,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/canvas': typeof CanvasRoute
  '/login': typeof LoginRouteWithChildren
  '/me': typeof MeRouteWithChildren
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/login/': typeof LoginIndexRoute
  '/me/': typeof MeIndexRoute
  '/workspaces/': typeof WorkspacesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/canvas': typeof CanvasRoute
  '/admin': typeof AdminIndexRoute
  '/login': typeof LoginIndexRoute
  '/me': typeof MeIndexRoute
  '/workspaces': typeof WorkspacesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/canvas': typeof CanvasRoute
  '/login': typeof LoginRouteWithChildren
  '/me': typeof MeRouteWithChildren
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/login/': typeof LoginIndexRoute
  '/me/': typeof MeIndexRoute
  '/workspaces/': typeof WorkspacesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/canvas'
    | '/login'
    | '/me'
    | '/workspaces'
    | '/admin/'
    | '/login/'
    | '/me/'
    | '/workspaces/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/canvas' | '/admin' | '/login' | '/me' | '/workspaces'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/canvas'
    | '/login'
    | '/me'
    | '/workspaces'
    | '/admin/'
    | '/login/'
    | '/me/'
    | '/workspaces/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  CanvasRoute: typeof CanvasRoute
  LoginRoute: typeof LoginRouteWithChildren
  MeRoute: typeof MeRouteWithChildren
  WorkspacesRoute: typeof WorkspacesRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workspaces': {
      id: '/workspaces'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof WorkspacesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/me': {
      id: '/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof MeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/canvas': {
      id: '/canvas'
      path: '/canvas'
      fullPath: '/canvas'
      preLoaderRoute: typeof CanvasRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspaces/': {
      id: '/workspaces/'
      path: '/'
      fullPath: '/workspaces/'
      preLoaderRoute: typeof WorkspacesIndexRouteImport
      parentRoute: typeof WorkspacesRoute
    }
    '/me/': {
      id: '/me/'
      path: '/'
      fullPath: '/me/'
      preLoaderRoute: typeof MeIndexRouteImport
      parentRoute: typeof MeRoute
    }
    '/login/': {
      id: '/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof LoginRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface LoginRouteChildren {
  LoginIndexRoute: typeof LoginIndexRoute
}

const LoginRouteChildren: LoginRouteChildren = {
  LoginIndexRoute: LoginIndexRoute,
}

const LoginRouteWithChildren = LoginRoute._addFileChildren(LoginRouteChildren)

interface MeRouteChildren {
  MeIndexRoute: typeof MeIndexRoute
}

const MeRouteChildren: MeRouteChildren = {
  MeIndexRoute: MeIndexRoute,
}

const MeRouteWithChildren = MeRoute._addFileChildren(MeRouteChildren)

interface WorkspacesRouteChildren {
  WorkspacesIndexRoute: typeof WorkspacesIndexRoute
}

const WorkspacesRouteChildren: WorkspacesRouteChildren = {
  WorkspacesIndexRoute: WorkspacesIndexRoute,
}

const WorkspacesRouteWithChildren = WorkspacesRoute._addFileChildren(WorkspacesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  CanvasRoute: CanvasRoute,
  LoginRoute: LoginRouteWithChildren,
  MeRoute: MeRouteWithChildren,
  WorkspacesRoute: WorkspacesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
