/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccessibleWorkspaceResponseDTO
 */
export interface AccessibleWorkspaceResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof AccessibleWorkspaceResponseDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AccessibleWorkspaceResponseDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AccessibleWorkspaceResponseDTO
     */
    'ownerUsername': string;
}
/**
 * 
 * @export
 * @interface AddUserToWorkspaceRequestBodyDTO
 */
export interface AddUserToWorkspaceRequestBodyDTO {
    /**
     * 
     * @type {number}
     * @memberof AddUserToWorkspaceRequestBodyDTO
     */
    'userId': number;
}
/**
 * 
 * @export
 * @interface CreateUserRequestBodyDTO
 */
export interface CreateUserRequestBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequestBodyDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequestBodyDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateWorkspaceRequestBodyDTO
 */
export interface CreateWorkspaceRequestBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateWorkspaceRequestBodyDTO
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CurrentUserResponseDTO
 */
export interface CurrentUserResponseDTO {
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserResponseDTO
     */
    'authenticated': boolean;
    /**
     * 
     * @type {number}
     * @memberof CurrentUserResponseDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserResponseDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserResponseDTO
     */
    'role': CurrentUserResponseDTORoleEnum;
}

export const CurrentUserResponseDTORoleEnum = {
    User: 'USER',
    Admin: 'ADMIN'
} as const;

export type CurrentUserResponseDTORoleEnum = typeof CurrentUserResponseDTORoleEnum[keyof typeof CurrentUserResponseDTORoleEnum];

/**
 * 
 * @export
 * @interface EditUserRequestBodyDTO
 */
export interface EditUserRequestBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof EditUserRequestBodyDTO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUserRequestBodyDTO
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUserRequestBodyDTO
     */
    'role'?: EditUserRequestBodyDTORoleEnum;
}

export const EditUserRequestBodyDTORoleEnum = {
    User: 'USER',
    Admin: 'ADMIN'
} as const;

export type EditUserRequestBodyDTORoleEnum = typeof EditUserRequestBodyDTORoleEnum[keyof typeof EditUserRequestBodyDTORoleEnum];

/**
 * 
 * @export
 * @interface EditWorkspaceRequestBodyDTO
 */
export interface EditWorkspaceRequestBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof EditWorkspaceRequestBodyDTO
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GetUsersFromWorkspaceRequestParamDTO
 */
export interface GetUsersFromWorkspaceRequestParamDTO {
    /**
     * 
     * @type {boolean}
     * @memberof GetUsersFromWorkspaceRequestParamDTO
     */
    'excludeExisting'?: boolean;
}
/**
 * 
 * @export
 * @interface PageWrapperAccessibleWorkspaceResponseDTO
 */
export interface PageWrapperAccessibleWorkspaceResponseDTO {
    /**
     * 
     * @type {Array<AccessibleWorkspaceResponseDTO>}
     * @memberof PageWrapperAccessibleWorkspaceResponseDTO
     */
    'content': Array<AccessibleWorkspaceResponseDTO>;
    /**
     * 
     * @type {number}
     * @memberof PageWrapperAccessibleWorkspaceResponseDTO
     */
    'number': number;
    /**
     * 
     * @type {number}
     * @memberof PageWrapperAccessibleWorkspaceResponseDTO
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof PageWrapperAccessibleWorkspaceResponseDTO
     */
    'totalElements': number;
    /**
     * 
     * @type {number}
     * @memberof PageWrapperAccessibleWorkspaceResponseDTO
     */
    'totalPages': number;
    /**
     * 
     * @type {boolean}
     * @memberof PageWrapperAccessibleWorkspaceResponseDTO
     */
    'first': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageWrapperAccessibleWorkspaceResponseDTO
     */
    'last': boolean;
    /**
     * 
     * @type {number}
     * @memberof PageWrapperAccessibleWorkspaceResponseDTO
     */
    'numberOfElements': number;
    /**
     * 
     * @type {SortDTO}
     * @memberof PageWrapperAccessibleWorkspaceResponseDTO
     */
    'sort': SortDTO;
}
/**
 * 
 * @export
 * @interface PageWrapperUserResponseDTO
 */
export interface PageWrapperUserResponseDTO {
    /**
     * 
     * @type {Array<UserResponseDTO>}
     * @memberof PageWrapperUserResponseDTO
     */
    'content': Array<UserResponseDTO>;
    /**
     * 
     * @type {number}
     * @memberof PageWrapperUserResponseDTO
     */
    'number': number;
    /**
     * 
     * @type {number}
     * @memberof PageWrapperUserResponseDTO
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof PageWrapperUserResponseDTO
     */
    'totalElements': number;
    /**
     * 
     * @type {number}
     * @memberof PageWrapperUserResponseDTO
     */
    'totalPages': number;
    /**
     * 
     * @type {boolean}
     * @memberof PageWrapperUserResponseDTO
     */
    'first': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageWrapperUserResponseDTO
     */
    'last': boolean;
    /**
     * 
     * @type {number}
     * @memberof PageWrapperUserResponseDTO
     */
    'numberOfElements': number;
    /**
     * 
     * @type {SortDTO}
     * @memberof PageWrapperUserResponseDTO
     */
    'sort': SortDTO;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    'sort'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SortDTO
 */
export interface SortDTO {
    /**
     * 
     * @type {boolean}
     * @memberof SortDTO
     */
    'sorted': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortDTO
     */
    'unsorted': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortDTO
     */
    'empty': boolean;
}
/**
 * 
 * @export
 * @interface UserResponseDTO
 */
export interface UserResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof UserResponseDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDTO
     */
    'role': UserResponseDTORoleEnum;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDTO
     */
    'createdAt': string;
}

export const UserResponseDTORoleEnum = {
    User: 'USER',
    Admin: 'ADMIN'
} as const;

export type UserResponseDTORoleEnum = typeof UserResponseDTORoleEnum[keyof typeof UserResponseDTORoleEnum];

/**
 * 
 * @export
 * @interface WorkspaceResponseDTO
 */
export interface WorkspaceResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceResponseDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceResponseDTO
     */
    'name': string;
}

/**
 * AdminControllerApi - axios parameter creator
 * @export
 */
export const AdminControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserRequestBodyDTO} createUserRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewUser: async (createUserRequestBodyDTO: CreateUserRequestBodyDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequestBodyDTO' is not null or undefined
            assertParamExists('createNewUser', 'createUserRequestBodyDTO', createUserRequestBodyDTO)
            const localVarPath = `/api/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequestBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/api/admin/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EditUserRequestBodyDTO} editUserRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUser: async (id: number, editUserRequestBodyDTO: EditUserRequestBodyDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('editUser', 'id', id)
            // verify required parameter 'editUserRequestBodyDTO' is not null or undefined
            assertParamExists('editUser', 'editUserRequestBodyDTO', editUserRequestBodyDTO)
            const localVarPath = `/api/admin/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUserRequestBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminControllerApi - functional programming interface
 * @export
 */
export const AdminControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUserRequestBodyDTO} createUserRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewUser(createUserRequestBodyDTO: CreateUserRequestBodyDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewUser(createUserRequestBodyDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.createNewUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {EditUserRequestBodyDTO} editUserRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editUser(id: number, editUserRequestBodyDTO: EditUserRequestBodyDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editUser(id, editUserRequestBodyDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.editUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminControllerApi - factory interface
 * @export
 */
export const AdminControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUserRequestBodyDTO} createUserRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewUser(createUserRequestBodyDTO: CreateUserRequestBodyDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseDTO> {
            return localVarFp.createNewUser(createUserRequestBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EditUserRequestBodyDTO} editUserRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUser(id: number, editUserRequestBodyDTO: EditUserRequestBodyDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserResponseDTO> {
            return localVarFp.editUser(id, editUserRequestBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponseDTO>> {
            return localVarFp.getAllUsers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminControllerApi - object-oriented interface
 * @export
 * @class AdminControllerApi
 * @extends {BaseAPI}
 */
export class AdminControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateUserRequestBodyDTO} createUserRequestBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public createNewUser(createUserRequestBodyDTO: CreateUserRequestBodyDTO, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).createNewUser(createUserRequestBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public deleteUser(id: number, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EditUserRequestBodyDTO} editUserRequestBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public editUser(id: number, editUserRequestBodyDTO: EditUserRequestBodyDTO, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).editUser(id, editUserRequestBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public getAllUsers(options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).getAllUsers(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthenticationControllerApi - axios parameter creator
 * @export
 */
export const AuthenticationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/current_user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationControllerApi - functional programming interface
 * @export
 */
export const AuthenticationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUserResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationControllerApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationControllerApi - factory interface
 * @export
 */
export const AuthenticationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<CurrentUserResponseDTO> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationControllerApi - object-oriented interface
 * @export
 * @class AuthenticationControllerApi
 * @extends {BaseAPI}
 */
export class AuthenticationControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    public getCurrentUser(options?: RawAxiosRequestConfig) {
        return AuthenticationControllerApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkspaceControllerApi - axios parameter creator
 * @export
 */
export const WorkspaceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} workspaceId 
         * @param {AddUserToWorkspaceRequestBodyDTO} addUserToWorkspaceRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToWorkspace: async (workspaceId: number, addUserToWorkspaceRequestBodyDTO: AddUserToWorkspaceRequestBodyDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('addUserToWorkspace', 'workspaceId', workspaceId)
            // verify required parameter 'addUserToWorkspaceRequestBodyDTO' is not null or undefined
            assertParamExists('addUserToWorkspace', 'addUserToWorkspaceRequestBodyDTO', addUserToWorkspaceRequestBodyDTO)
            const localVarPath = `/api/workspaces/{workspaceId}/users`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUserToWorkspaceRequestBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateWorkspaceRequestBodyDTO} createWorkspaceRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspace: async (createWorkspaceRequestBodyDTO: CreateWorkspaceRequestBodyDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWorkspaceRequestBodyDTO' is not null or undefined
            assertParamExists('createWorkspace', 'createWorkspaceRequestBodyDTO', createWorkspaceRequestBodyDTO)
            const localVarPath = `/api/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkspaceRequestBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace: async (workspaceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteWorkspace', 'workspaceId', workspaceId)
            const localVarPath = `/api/workspaces/{workspaceId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {EditWorkspaceRequestBodyDTO} editWorkspaceRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editWorkspace: async (workspaceId: number, editWorkspaceRequestBodyDTO: EditWorkspaceRequestBodyDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('editWorkspace', 'workspaceId', workspaceId)
            // verify required parameter 'editWorkspaceRequestBodyDTO' is not null or undefined
            assertParamExists('editWorkspace', 'editWorkspaceRequestBodyDTO', editWorkspaceRequestBodyDTO)
            const localVarPath = `/api/workspaces/{workspaceId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editWorkspaceRequestBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {GetUsersFromWorkspaceRequestParamDTO} param 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersFromWorkspace: async (workspaceId: number, param: GetUsersFromWorkspaceRequestParamDTO, pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('getUsersFromWorkspace', 'workspaceId', workspaceId)
            // verify required parameter 'param' is not null or undefined
            assertParamExists('getUsersFromWorkspace', 'param', param)
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getUsersFromWorkspace', 'pageable', pageable)
            const localVarPath = `/api/workspaces/{workspaceId}/users`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (param !== undefined) {
                for (const [key, value] of Object.entries(param)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaces: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getWorkspaces', 'pageable', pageable)
            const localVarPath = `/api/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromWorkspace: async (workspaceId: number, userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('removeUserFromWorkspace', 'workspaceId', workspaceId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeUserFromWorkspace', 'userId', userId)
            const localVarPath = `/api/workspaces/{workspaceId}/users/{userId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceControllerApi - functional programming interface
 * @export
 */
export const WorkspaceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspaceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} workspaceId 
         * @param {AddUserToWorkspaceRequestBodyDTO} addUserToWorkspaceRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserToWorkspace(workspaceId: number, addUserToWorkspaceRequestBodyDTO: AddUserToWorkspaceRequestBodyDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserToWorkspace(workspaceId, addUserToWorkspaceRequestBodyDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceControllerApi.addUserToWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateWorkspaceRequestBodyDTO} createWorkspaceRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkspace(createWorkspaceRequestBodyDTO: CreateWorkspaceRequestBodyDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkspace(createWorkspaceRequestBodyDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceControllerApi.createWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkspace(workspaceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkspace(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceControllerApi.deleteWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {EditWorkspaceRequestBodyDTO} editWorkspaceRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editWorkspace(workspaceId: number, editWorkspaceRequestBodyDTO: EditWorkspaceRequestBodyDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editWorkspace(workspaceId, editWorkspaceRequestBodyDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceControllerApi.editWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {GetUsersFromWorkspaceRequestParamDTO} param 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersFromWorkspace(workspaceId: number, param: GetUsersFromWorkspaceRequestParamDTO, pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageWrapperUserResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersFromWorkspace(workspaceId, param, pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceControllerApi.getUsersFromWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaces(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageWrapperAccessibleWorkspaceResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspaces(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceControllerApi.getWorkspaces']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserFromWorkspace(workspaceId: number, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserFromWorkspace(workspaceId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceControllerApi.removeUserFromWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkspaceControllerApi - factory interface
 * @export
 */
export const WorkspaceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspaceControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} workspaceId 
         * @param {AddUserToWorkspaceRequestBodyDTO} addUserToWorkspaceRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToWorkspace(workspaceId: number, addUserToWorkspaceRequestBodyDTO: AddUserToWorkspaceRequestBodyDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addUserToWorkspace(workspaceId, addUserToWorkspaceRequestBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateWorkspaceRequestBodyDTO} createWorkspaceRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspace(createWorkspaceRequestBodyDTO: CreateWorkspaceRequestBodyDTO, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceResponseDTO> {
            return localVarFp.createWorkspace(createWorkspaceRequestBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace(workspaceId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWorkspace(workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {EditWorkspaceRequestBodyDTO} editWorkspaceRequestBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editWorkspace(workspaceId: number, editWorkspaceRequestBodyDTO: EditWorkspaceRequestBodyDTO, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceResponseDTO> {
            return localVarFp.editWorkspace(workspaceId, editWorkspaceRequestBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {GetUsersFromWorkspaceRequestParamDTO} param 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersFromWorkspace(workspaceId: number, param: GetUsersFromWorkspaceRequestParamDTO, pageable: Pageable, options?: RawAxiosRequestConfig): AxiosPromise<PageWrapperUserResponseDTO> {
            return localVarFp.getUsersFromWorkspace(workspaceId, param, pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaces(pageable: Pageable, options?: RawAxiosRequestConfig): AxiosPromise<PageWrapperAccessibleWorkspaceResponseDTO> {
            return localVarFp.getWorkspaces(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} workspaceId 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromWorkspace(workspaceId: number, userId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeUserFromWorkspace(workspaceId, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkspaceControllerApi - object-oriented interface
 * @export
 * @class WorkspaceControllerApi
 * @extends {BaseAPI}
 */
export class WorkspaceControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} workspaceId 
     * @param {AddUserToWorkspaceRequestBodyDTO} addUserToWorkspaceRequestBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApi
     */
    public addUserToWorkspace(workspaceId: number, addUserToWorkspaceRequestBodyDTO: AddUserToWorkspaceRequestBodyDTO, options?: RawAxiosRequestConfig) {
        return WorkspaceControllerApiFp(this.configuration).addUserToWorkspace(workspaceId, addUserToWorkspaceRequestBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateWorkspaceRequestBodyDTO} createWorkspaceRequestBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApi
     */
    public createWorkspace(createWorkspaceRequestBodyDTO: CreateWorkspaceRequestBodyDTO, options?: RawAxiosRequestConfig) {
        return WorkspaceControllerApiFp(this.configuration).createWorkspace(createWorkspaceRequestBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} workspaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApi
     */
    public deleteWorkspace(workspaceId: number, options?: RawAxiosRequestConfig) {
        return WorkspaceControllerApiFp(this.configuration).deleteWorkspace(workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} workspaceId 
     * @param {EditWorkspaceRequestBodyDTO} editWorkspaceRequestBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApi
     */
    public editWorkspace(workspaceId: number, editWorkspaceRequestBodyDTO: EditWorkspaceRequestBodyDTO, options?: RawAxiosRequestConfig) {
        return WorkspaceControllerApiFp(this.configuration).editWorkspace(workspaceId, editWorkspaceRequestBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} workspaceId 
     * @param {GetUsersFromWorkspaceRequestParamDTO} param 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApi
     */
    public getUsersFromWorkspace(workspaceId: number, param: GetUsersFromWorkspaceRequestParamDTO, pageable: Pageable, options?: RawAxiosRequestConfig) {
        return WorkspaceControllerApiFp(this.configuration).getUsersFromWorkspace(workspaceId, param, pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApi
     */
    public getWorkspaces(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return WorkspaceControllerApiFp(this.configuration).getWorkspaces(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} workspaceId 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApi
     */
    public removeUserFromWorkspace(workspaceId: number, userId: number, options?: RawAxiosRequestConfig) {
        return WorkspaceControllerApiFp(this.configuration).removeUserFromWorkspace(workspaceId, userId, options).then((request) => request(this.axios, this.basePath));
    }
}



